from abc import ABC, abstractmethod

class DataAnalysis(ABC):
        """The abstract base class for all data analyses. Methods cover
        the execution of analyses, rendering, and exporting of data."""
        
        
        def canHandleRequest(self,request):
                """
                Returns True if the routine is capable of handling the request (i.e. the
                RequestModel is of the type that the analysis expects), and False otherwise.
                """
                if isinstance(request, self.getRequestType()):
                        return True
                else:
                        return False
        
        @abstractmethod      
        def getRequestType(self):
                """
                Returns the class object for the routine's companion request type.
                """
                pass
                
        @abstractmethod
        def execute(self,request):
                """
                Contains the code for processing data generated by mining routines and/or from external
                databases.
                
                Parameters:
                        request (@input): A RequestModel object that encapsulates all the information needed
                        to run the analysis.
                
                """
                pass
                
        def run(self,request):
                """
                Encodes the workflow of a DataAnalysis object. The client only needs
                to run this method in order to get results. 
                """
                response = self.execute(request)
                return response